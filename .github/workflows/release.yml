on: [push]
jobs:
  pypi-build-and-publish:
    name: Build and upload release to PyPI
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        run: |
          python -m pip install poetry==1.5.1
      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true
      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: |
          poetry install
      - name: Build package
        run: |
          poetry build
      - name: mint API token
        id: mint-token
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq '.value' <<< "${resp}")
          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/github/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq '.token' <<< "${resp}")
          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"
          # see the next step in the workflow for an example of using this step output
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"
      - name: Publish the package with poetry
        run: |
          poetry publish -u __token__ -p '${{ steps.mint-token.outputs.api-token }}'
